[[ios-getting-started]]
[role="chunk-page chunk-toc"]
== Getting started


[[ios-getting-started-get-your-personal-web-key]]
[role="numbered-lvlfirst"]
=== Get your personal web key

[role="skip-toc"]
==== 1. Log in or sign up

Log in or sign up for a free account on WonderPush at: https://dashboard.wonderpush.com/account/login

image:web/getting-started/login.png[Image of login]

You will be able to invite new members to join your project with
different levels of permission (owner, editor…).

[role="skip-toc"]
==== 2. Register your application

Give a name to your project. e.g. MyGame
Make sure to check `iOS` under the `Platforms` section.


[role="skip-toc"]
==== 3. Copy your client id and client secret

Under the `Settings / Configuration` menu.


[[ios-getting-started-integrate-sdk]]
[role="numbered-lvlfirst"]
=== Integrate the SDK

For easy integration, we distribute our SDK as a pod.

If you're using CocoaPods, you can skip the next section to directly <<ios-getting-started-integrate-sdk-add-pod-dependency,add the dependency>>.

[[ios-getting-started-integrate-sdk-install-cocoapods]]
==== Not already using CocoaPods?

Don't worry, it's easy. Install it using the following command:

[source,bash]
----
sudo gem install cocoapods
# wait 1-2 minutes, it takes some time before printing anything on the screen…
----

You can read the https://guides.cocoapods.org/using/getting-started.html#getting-started["complete installation guide here", window="_blank"], but you normally won't need it.

Once CocoaPods is installed, you'll have to create a `Podfile` for your project.
You can give a try to the specially purposed command:

[source,bash]
----
pod init
----

Or you can edit the `Podfile` file yourself so that it reads the following:

[source,bash]
----
target 'YourApplicationTarget' do
    platform :ios, '7.0'
end
----

Then simply run:

[source,bash]
----
pod install
----

This will edit your project to create a multi-project workspace so that each dependency builds as their respective developer planned them to build.

Finally, you will need to close your project in XCode, and open instead the newly created `YourProject.xcworkspace` file, as indicated in the command output.

You can continue now with the next section.

[[ios-getting-started-integrate-sdk-add-pod-dependency]]
==== Add the WonderPush SDK as a dependency

Edit your `Podfile` to add the following line:

[source,bash]
----
# Locate your application target
target 'YourApplicationTarget' do
    platform :ios, '7.0'

    # Add this single line:
    pod 'WonderPush', '~> 2.0'
end
----

Next run the following command to effectively download and incorporate WonderPush to your project:

[source,bash]
----
pod install
----

You are now set to use the latest `1.2.x.x` version. (You'll note that we dropped the `v1` prefix, that denotes the API version, in order to conform to semantic versioning.)

To perform a version update when a new one becomes available, you would simply run:

[source,bash]
----
pod update
----

[[ios-getting-started-integrate-sdk-swift]]
==== Swift projects

If your project uses Swift, you will need to change the platform to iOS 8.0 and use frameworks.
Edit your `Podfile` as follows:

[source,bash]
----
# Locate your application target
target 'YourApplicationTarget' do
    platform :ios, '8.0'

    # Make sure this line is present:
    use_frameworks!
end
----

Next thing, add the following import to your bridging header:

[source,objc]
----
#import <WonderPush/WonderPush.h>
----

.No bridging header?
[TIP]
====
The bridging header is names after your application `MyApplication-Bridging-Header.h`.
If you don't have one, simply add an Objective C `.m` file to your project, and accept the prompt that proposes to create a bridging header for you.
You can then remove the `.m` file you've just created.
====

You can now use the WonderPush iOS SDK in your Swift project.
You can use the Swift equivalent of the Objective C code from this guide and it will work.
Just make sure to use `import WonderPush` in your Swift files where you would use `#import <WonderPush/WonderPush.h>` in Objective C.


[[ios-getting-started-initialize-sdk]]
[role="numbered-lvlfirst"]
=== Initialize the SDK

Add this code to the corresponding method of you Application delegate:

[source,objc]
----
#import <WonderPush/WonderPush.h>

- (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    // [WonderPush setLogging:YES]; // only activate logs for development
    [WonderPush setClientId:@"YOUR_CLIENT_ID" secret:@"YOUR_CLIENT_SECRET"]; // <1> <2>
    [WonderPush setupDelegateForApplication:application]; // <3>
    [WonderPush setupDelegateForUserNotificationCenter];

    return YES;
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // You MUST call the following method at least once to make the user pushable.
    // - You can call this method multiple times. The user is only prompted for permission by iOS once.
    // - Calling with YES opts the user in, whether he was not opt-in or soft opt-out (by calling with NO).
    // - There is no need to call this method if the permission has already been granted, but it does not harm either.
    //   Prior to WonderPush iOS SDK v1.2.1.0, you should call it if the user was already opt-in in a non WonderPush-enabled version of your application.
    // - If the permission has been denied, calling this method cannot opt the user back in as iOS leaves the user in control, through the system settings.
    // Because you only have ONE chance for prompting the user, you should find a good timing for that.
    // Here we propose to systematically call it when the application starts, so the user will be prompted directly at the first launch.
    [WonderPush setNotificationEnabled:YES];

    return YES;
}
----
<1> Replace *YOUR_CLIENT_ID* with your client id found in your https://dashboard.wonderpush.com/["WonderPush dashboard",window="_blank"], under the `Settings / Configuration` menu. +
  Eg.: +0123456789abcdef0123456789abcdef01234567+.
<2> Replace *YOUR_CLIENT_ID* with your client secret found in your https://dashboard.wonderpush.com/["WonderPush dashboard", window="_blank"], next to the client id as described above. +
  Eg.: +0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef+.
<3> We place this call in `-application:willFinishLaunchingWithOptions:` so that it properly intercepts the following call to `-application:didFinishLaunchingWithOptions:`. +
  If you prefer to only use `-application:didFinishLaunchingWithOptions:`, then you should manually forward it to the SDK by simply calling `[WonderPush application:application didFinishLaunchingWithOptions:launchOptions];`.

That's all for the code, you've initialized the SDK with your credentials, setup your `AppDelegate` automatically, and found some appropriate time to ask the user to opt-in.

[NOTE]
====
As our delegate implements the `application:didReceiveRemoteNotification:fetchCompletionHandler:` method, this means that the `application:didReceiveRemoteNotification:` method of your delegate will no longer be called.
You are required to use the former instead.

Here is the https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/index.html#//apple_ref/occ/intfm/UIApplicationDelegate/application:didReceiveRemoteNotification:fetchCompletionHandler:["official documentation", window="_blank"].
====

.ADVANCED
[TIP]
====
We propose an easy `AppDelegate` setup functionnality that should suit most needs: the WonderPush SDK overrides your `Application.delegate`, hooks on some methods, and always calls back your `AppDelegate`.

If for some reason this does not suit your specific needs, you can resort back to manual `AppDelegate` forwarding using the code below:

[source,objc]
----
// Checkout the list of functions to forward at:
//     http://wonderpush.github.io/wonderpush-ios-sdk/latest/html/Classes/WonderPush.html#task_Manual%20AppDelegate%20forwarding

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    [WonderPush setClientId:@"YOUR_CLIENT_ID" secret:@"YOUR_CLIENT_SECRET"]; // you can keep this method call in application:willFinishLaunchingWithOptions: if you wish
    [WonderPush application:application didFinishLaunchingWithOptions:launchOptions];
    return YES;
}

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo
{
    [WonderPush application:application didReceiveRemoteNotification:userInfo];
}

- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    [WonderPush application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
}

- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
    [WonderPush application:application didFailToRegisterForRemoteNotificationsWithError:error];
}

- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification
{
    [WonderPush application:application didReceiveLocalNotification:notification];
}

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler
{
    [WonderPush application:application didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    [WonderPush applicationDidBecomeActive:application];
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    [WonderPush applicationDidEnterBackground:application];
}
----

Please contact us if you are doing down this road, we would like to hear about your use case.
====


[[ios-getting-started-rich-notifications]]
[role="numbered-lvlfirst"]
=== Support iOS 10 rich notifications

In order to use rich notifications, you must add a Notification Service Extension to your project and let the WonderPush SDK do the hard work for you.

First, let's add the new application extension to your project:

. Open the XCode _File_ menu, under _New_ select _Target…_.
. In the _iOS_ tab, in the _Application Extension_ group, select _Notification Service Extension_ and click _Next_.
. Give it a name you like, here we soberly chose _NotificationServiceExtension_. +
  Choose the same team as your application target. +
  Make sure that it is linked to your project and embedded in your application, in the bottom. +
  Click _Finish_.
. XCode will ask you whether you want to activate the new scheme. Click _Activate_.

Then, we need to link the extension to another pod of the WonderPush SDK. +
Open your `Podfile` and add the following:

[source,bash]
----
# Create a new target using the exact same name that you entered above
target 'NotificationServiceExtension' do
    # Use the same platform as your application target
    platform :ios, '7.0'

    pod 'WonderPush/NotificationServiceExtension', '~> 2.0'
end
----

Then run the following command to incorporate the WonderPush SDK pod to your extension:

[source,bash]
----
pod install
----

You should see the following files in your Project navigator:

. `YourProject`
.. `NotificationServiceExtension` (this is the name of the service extension you chose earlier)
... `NotificationService.h`
... `NotificationService.m`
... `Info.plist`

We are going to remove almost all generated code to rely on a utility class the implements it all for you.

Open `NotificationService.h` and modify it so that it reads:

[source,objc]
----
#import <WonderPush/NotificationServiceExtension.h>

// We delegate everything to WPNotificationService
@interface NotificationService : WPNotificationService

@end
----

Then open `NotificationService.m` and modify it so that it reads:

[source,objc]
----
#import "NotificationService.h"

@implementation NotificationService

// The WPNotificationService superclass already implements everything

@end
----

.ADVANCED
[TIP]
====
If you want to have your own code running, by example for notifications sent by other push providers, you can keep the code generated by the XCode template.

Our NotificationServiceExtension SDK functions return a boolean value indicating whether the call has been handled or not.
You can hence keep the generated code and simply add the following import to your `NotificationService.m` file:

[source,objc]
----
#import <WonderPush/NotificationServiceExtension.h>
----

And add the following at the beginning of the two methods of your implementation:

[source,objc]
----
- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent * _Nonnull))contentHandler {
    if ([WonderPushNotificationServiceExtension serviceExtension:self didReceiveNotificationRequest:request withContentHandler:contentHandler]) {
        // Handled by the WonderPush NotificationServiceExtension SDK, we're done
        return;
    }

    // […]
    // There should be somewhere a call like this: contentHandler(request.content);
}


- (void)serviceExtensionTimeWillExpire {
    if ([WonderPushNotificationServiceExtension serviceExtensionTimeWillExpire:self]) {
        // Handled by the WonderPush NotificationServiceExtension SDK, we're done
        return;
    }

    // […]
}
----

If you want instead to be able to modify a notification for your own processing while letting the WonderPush NotificationServiceExtension SDK perform its own processing too,
that is if you want the changes to be cumulative, you should pass a modified request to the SDK as shown below:

[source,objc]
----
- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent * _Nonnull))contentHandler {
    // Make your own copy of the content
    UNMutableNotificationContent *content = [request.content mutableCopy];

    // Modify the content as needed
    //content.title = [NSString stringWithFormat:@"%@ [modified]", content.title];

    // Wrap up your changes in a new request
    request = [UNNotificationRequest requestWithIdentifier:request.identifier content:content trigger:request.trigger];

    // Forward the call to the WonderPush NotificationServiceExtension SDK
    if (![WonderPushNotificationServiceExtension serviceExtension:self didReceiveNotificationRequest:request withContentHandler:contentHandler]) {
        // The notification was not for the WonderPush NotificationServiceExtension SDK, handle it ourself
        contentHandler(request.content);
    }
}
----
====

[[ios-getting-started-background-execution]]
[role="numbered-lvlfirst"]
=== Recommended background execution modes

The `remote-notification` background execution mode permits your app to receive silent or data-only notifications,
as well as better report influenced application opens, by measuring the time between the reception of the notification and the following application open. +
Although not strictly mandatory, you are highly encouraged to add it to your app.

To add the `remote-notification` background execution mode:

. Select your project in the _Project navigator_ on the left pane
. Go to the _Capabilities_ tab
. Switch _Background Modes_ ON
. And check _Remote notifications_

Here is https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26-SW17["the official guide to enabling background modes", window="_blank"],
and https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html#//apple_ref/doc/uid/TP40007072-CH4-SW57["official documentation to the `remote-notification` background mode", window="_blank"].


[[ios-getting-started-app-transport-security]]
[role="numbered-lvlfirst"]
=== App Transport Security setting

If you plan to load external HTTP resources in your application, like an HTML in-app displaying a given URL, you must make sure they will load well.
Starting from iOS 9, Apple will block your application network calls to insecure resources, like any HTTP website, or weak HTTPS SSL protocols.
This is a move forward a more secure web, imposed by Apple that you may find too restrictive.

This becomes a problem when you want to display an HTML in-app displaying a dedicated web page hosting on your HTTP-only website for instance.
In such scenario, you will likely want to disable this security feature altogether.

. Select your project in the _Project navigator_ on the left pane
. Click your application target
. Go to the _Info_ tab
. Add the `App Transport Security Settings` key
. Click the _+_ to add an entry inside it
. Set `Allow Arbitrary Loads` to `YES`.

Alternatively, open your application `Info.plist` file and add the following entry:

[source,xml]
----
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
----

[WARNING]
====
You must repeat the same process for your Notification Service Extension!

The settings for your application and your extension are indeed separate. +
Failing to do so will prevent you do display external HTTP media attachments.

Simply repeat the same steps by selecting your Notification Service Extension target instead of your application target, or open your Notification Service Extension `Info.plist` file instead of your application one.
====

For more information about this topic, please read https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33["the documentation of the `NSAppTransportSecurity` info key", window="_blank"].
You can find where to define more fine grained exceptions.


[[ios-getting-started-geolocation]]
[role="numbered-lvlfirst"]
=== Geolocation

The WonderPush SDK tracks the user geolocation if your application already monitors it, and does not actively monitors geolocation.
This permits having zero impact on user granted rights and battery life.

If your application does not already monitors geolocation but wish to do so, you can create a `CLLocationManager` and call `startUpdatingLocation` as shown below:

[source,objc]
----
// AppDelegate.h
#import <UIKit/UIKit.h>
#import <CoreLocation/CoreLocation.h>

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) CLLocationManager *locationManager;

@end
----

[source,objc]
----
// AppDelegate.m
#import "AppDelegate.h"

@implementation AppDelegate

- (BOOL)application(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.locationManager = [CLLocationManager new];
    self.locationManager.desiredAccuracy = kCLLocationAccuracyHundredMeters; // you can also choose any other more precise accuracy
    [self.locationManager startUpdatingLocation];
}

@end
----

This creates and keeps a reference to an actively monitoring `CLLocationManager` as long as your application is running, and hence permits the WonderPush SDK to read location whenever needed, using its own instance of `CLLocationManager`.


[[ios-getting-started-configure-notifications]]
[role="numbered-lvlfirst"]
=== Configure remote notifications

First of all you have to set up your application as described in the https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26-SW6["Configuring Push Notifications guide", window="_blank"]. +
Once you created your provisioning profile and an associated push notifications certificate on your computer you will have to export your push notifications certificate in order to let WonderPush send notifications to your device:

. Launch `KeyChain Access`.
. Choose `My Certificates` under the `Category` navigation menu on the left.
. Select the newly created certificate associated to your App ID.
  Its name should be `Apple Push Services: [your.app.id]` (older certificates are named `Apple Development/Production iOS Push Services: [your.app.id]`.)
+
[WARNING]
====
If you don’t see it, make sure you have downloaded the iOS Push Service certificate Apple generated for your application:

* Log into the https://developer.apple.com/account/ios/certificate/certificateList.action["member center", window="_blank"] and choose `Certificates, Identifiers & Profiles` section.
* Under `Certificates`, click the certificate corresponding to your App ID, of type `Apple Push Services`.
  (Older certificates have a type of either `APNs Development iOS` or `APNs Production iOS`.)
* Click `Download`, and open the certificate with `Keychain Access`.
====
+
. Make sure you see a matching private key when you expand the certificate item, but select only the certificate.
. Click on `File / Export items`. Leave `File Format` to `Personal Information Exchange (.p12)`. +
+
[TIP]
====
You can leave the password field blank.
====
+
. Then go to your https://dashboard.wonderpush.com/["WonderPush dashboard", window="\_blank"] and upload the certificate in the `Settings / Configuration` page of your application management. +
  Choose either the development or production environment.
  The _development_ environment is used for sending to the devices you develop with, for applications installed directly using XCode.
  The _production_ environment is used for applications distributed through the App Store or TestFlight.
+
[TIP]
====
There can only be one APNs iOS certificate per application.

Please consider creating an application for development and an application for production, there will be no additional charges.

Switching from the development to production environment, or vice-versa, will render every push token invalid and they will be cleaned up as soon as you'll send a notification to it.
====


[[ios-getting-started-send-your-first-notification]]
[role="numbered-lvlfirst"]
=== Send your first push notifications

. Log into https://dashboard.wonderpush.com/["your WonderPush dashboard"], click `Notifications`, then under the `Create notification` menu choose `Custom notification`.
. Give it a name, enter a short push message, then click `Save and continue`.
. Keep `Send to all users` selected, then click `Save and continue`.
. Keep `Once, when activated` selected, then click `Save`.
. Now close your application in your device.
. Click `FIRE` in the dashboard.
. A notification should have appeared in the notification center.

To fire your notification again, simply click `FIRE` again.
Allow 1 minute between each send, and feel free to refresh the page if necessary.


[[ios-getting-started-using-sdk]]
[role="numbered-lvlfirst"]
=== Using the SDK in your iOS application

[[ios-getting-started-using-sdk-track-event]]
==== Track your first event

The SDK automatically tracks generic events. This is probably insufficient to help you analyze, segment and notify users properly.
You will want to track events that make sense for your business, here is an simple example:

[source,objc]
----
[WonderPush trackEvent:"customized_interests" withData:nil];
----

This would permit you to know easily whether a user kept the default set of "topics of interests", say in a newsstand application, or if they already chose a topics that represents well their center of interest.
Your notification strategy could be to incite to customization for the lazy users, whereas you could engage in a more personalized communication with the users you performed the customized_interests event.

[[ios-getting-started-using-sdk-enriching-events]]
==== Enriching the events

Events can host a rich set of properties that WonderPush indexes to permit you to filter users based on finer criteria.
To do so, simply give a JSON object as second parameter. Here is an example:

[source,objc]
----
[WonderPush trackEvent:"browse_catalog" withData:@{"string_category": @"fashion"}];
----

Using this information, you could notify customers on new items for the categories that matters most to them.

Here is another example:

[source,objc]
----
[WonderPush trackEvent:"purchase" withData:@{@"int_foo": [NSNumber numberWithInt:3], @"float_amount": [NSNumber numberWithFloat:59.98]}];
----

You could choose to thank customer for every purchase, or you could take advantage of the purchase amount to give differentiated coupons to best buyers.

[[ios-getting-started-using-sdk-tagging-users]]
==== Tagging users

Some information are better represented as properties on a user, rather than discrete events in a timeline.
Here is an example:

[source,objc]
----
(void)didAddItemToCart:(NSString*)item withPrice:(double)price
{
    // Variables managed by your application
    cartItems += 1;
    cartAmount += price;
    // ...

    // Update this information in WonderPush
    [WonderPush putInstallationCustomProperties:@{@"int_itemsInCart": [NSNumber numberWithInt:cartItems],
                                                  @"float_cartAmount": [NSNumber numberWithFloat:cartAmount]}];
}

- (void)didPurchase {
    // Empty the information in WonderPush
    [WonderPush putInstallationCustomProperties:@{@"int_itemsInCart": [NSNull null],
                                                  @"float_cartAmount": [NSNull null]}];
}
----

Inactive users with non-empty carts could then easily be notified. Combined with a free delivery coupon for carts above a given amount, your conversion rate will improve still!

[[ios-getting-started-using-sdk-opt-out]]
==== Opt-out

On iOS, users are opt-out by default, and you need to call the `[WonderPush setNotificationEnabled:YES]` method to register the device, at an appropriate time. A user always has the option of opening the system settings and blocking notifications. The application has no mean to know it.

If a user no longer wants to receive notifications, you will rather want them to opt out of push notifications. This is done very simply using the following function call, and WonderPush will no longer send push notifications to this installation:

[source,objc]
----
[WonderPush setNotificationEnabled:NO];
----

Note that the device is not actually unregistered from push notifications, so the registration id continues to be valid and the device stays reachable.
The installation is simply marked and reported as _Soft opt-out_ in the dashboard, and WonderPush filters it out from the targeted users.


[[ios-getting-started-using-sdk-demo-application]]
==== Demo application
You can read an example integration by looking at the code of our https://github.com/wonderpush/wonderpush-ios-demo["Demo application, available on Github", window="_blank"].


[[ios-getting-started-using-sdk-api-reference]]
==== API Reference
Take a look at the functions exposed by the https://wonderpush.github.io/wonderpush-ios-sdk/latest/html/Classes/WonderPush.html["WonderPush class", window="_blank"].


[[ios-getting-started-advanced-usage]]
=== Advanced usage

[[ios-getting-started-advanced-usage-reading-custom-key-value-payload]]
==== Reading custom key-value payload

A notification can be added custom key-value pairs to it. In order to retrieve them, simply add one line of code in the appropriate methods of your application delegate as follow:

[source,objc]
----
(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo
{
    // Get the custom payload
    NSDictionary * custom = [userInfo objectForKey:@"custom"];
}

// If you use the remote-notification background mode
- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification
{
    // Get the custom payload
    NSDictionary * custom = [notification.userInfo objectForKey:@"custom"];
}
----


[[ios-getting-started-advanced-usage-own-deep-links]]
==== Handling your own deep links

Deep links are handled by the SDK by calling the `[application openURL:]` function, just like HTTP links, but with an application-specific scheme, like: `yourApplicationSpecificScheme://somePage`.

Custom schemes are registered in your application’s `Info.plist` file, under the `URL Types section`.
To add one, select your project in the Project navigator, then select your application in the `Targets section`,
go to the `Info` tab, expand the `URL Types` section, and click the `+` button.
Then simply choose a unique scheme `(yourApplicationSpecificScheme` in our example) and write it in the `URL Schemes` field.

You will then need to implement the `- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation` function of your application delegate.

Here is an example:

[source,objc]
----
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{
    UINavigationController *navController = (UINavigationController *)self.window.rootViewController;
    [navController popToRootViewControllerAnimated:NO];
    UIStoryboard *storyboard = navController.storyboard;

    // Look at the url, and open the target page
    [navController pushViewController:[storyboard instantiateViewControllerWithIdentifier:@"DeepPageId"] animated:YES];
// For a more nested navigation tree, call pushViewController for each intermediate view

    return YES; // NO: not handled, YES: handled
}
----

If desired, you can also broadcast the notification opening to let some code resolve the most appropriate action to perform. To do so, you would use the `wonderpush://notificationOpen/broadcast URI` in your notification. Here is how to listen to this broadcast preferably in your `application: didFinishLaunchingWithOptions:` function of your application delegate:


[source,objc]
----
[[NSNotificationCenter defaultCenter] addObserverForName:WP_NOTIFICATION_OPENED_BROADCAST object:nil queue:nil usingBlock:^(NSNotification *note) {
NSDictionary *pushNotification = note.userInfo;

    UINavigationController *navController = (UINavigationController *)self.window.rootViewController;
    [navController popToRootViewControllerAnimated:NO];
    UIStoryboard *storyboard = navController.storyboard;

    // Look at the push notification data, and open the target page
    [navController pushViewController:[storyboard instantiateViewControllerWithIdentifier:@"DeepPageId"] animated:YES];
// For a more nested navigation tree, call pushViewController for each intermediate view
}];
----
