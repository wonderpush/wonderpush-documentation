[[ios-getting-started]]
[role="chunk-page chunk-toc"]
== Getting started


[[ios-getting-started-get-your-personal-web-key]]
[role="numbered-lvlfirst"]
=== Get your personal web key

[role="skip-toc"]
==== 1. Log in or sign up

Log in or sign up for a free account on WonderPush at: https://dashboard.wonderpush.com/account/login

image:web/getting-started/login.png[Image of login]

You will be able to invite new members to join your project with
different levels of permission (owner, editor…).

[role="skip-toc"]
==== 2. Register your application

Give a name to your project. e.g. MyGame
Make sure to check `iOS` under the `Platforms` section.


[role="skip-toc"]
==== 3. Copy your client id and client secret

Under the `Settings / Configuration` menu.


[[ios-getting-started-download-sdk-for-ios]]
[role="numbered-lvlfirst"]
=== Download WonderPush SDK for ios

Download the project https://github.com/wonderpush/wonderpush-ios-sdk/releases/latest["on Github", window="_blank"].

Extract `WonderPush.framework` from the downloaded archive.


[[ios-getting-started-set-up-project]]
[role="numbered-lvlfirst"]
=== Setup your project

. Drag and drop the `WonderPush.framework` file to your project.
. Select your project file in the project navigator.
. On the top right side select `General`.
. Scroll down to `Linked Frameworks and libraries` and click on the plus to add the following frameworks:
** SystemConfiguration
** MobileCoreServices
** CoreGraphics
** UIKit
** CoreTelephony
** CoreLocation
** CoreBluetooth
** AVFoundation
** CoreMotion


[[ios-getting-started-initialize-sdk]]
[role="numbered-lvlfirst"]
=== Initialize the SDK

Add this code to the corresponding method of you Application delegate:


[source,objc]
----
#import <WonderPush/WonderPush.h>

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // [WonderPush setLogging:YES]; // only activate logs for development
    [WonderPush setClientId:@"[YOUR_CLIENT_ID]" secret:@"[YOUR_CLIENT_SECRET]"]; // <1> <2>
    [WonderPush setNotificationEnabled:YES];
    [WonderPush handleApplicationLaunchWithOption:launchOptions];
    return YES;
}

- (void)applicationDidEnterBackground:(UIApplication *)application {
    [WonderPush applicationDidEnterBackground:application];
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    [WonderPush applicationDidBecomeActive:application];
}
----
<1> Replace *[YOUR_CLIENT_ID]* with your client id found in your https://dashboard.wonderpush.com/["WonderPush dashboard",window="_blank"], under the `Settings / Configuration` menu. +
  Eg.: +0123456789abcdef0123456789abcdef01234567+.
<2> Replace *[YOUR_CLIENT_ID]* with your client secret found in your https://dashboard.wonderpush.com/["WonderPush dashboard", window="_blank"], next to the client id as described above. +
  Eg.: +0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef+.


[[ios-getting-started-configure-notifications]]
[role="numbered-lvlfirst"]
=== Configure remote notifications

==== Handle remote notifications

First of all you have to set up your application as described in the https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26-SW6["Configuring Push Notifications guide", window="_blank"]. +
Once you created your provisioning profile and an associated push notifications certificate on your computer you will have to export your push notifications certificate in order to let WonderPush send notifications to your device:

. Launch `KeyChain Access`.
. Choose `My Certificates` under the `Category` navigation menu on the left.
. Select the newly created certificate associated to your App ID.
  Its name should be `Apple Push Services: [your.app.id]` (older certificates are named `Apple Development/Production iOS Push Services: [your.app.id]`.)
+
[WARNING]
====
If you don’t see it, make sure you have downloaded the iOS Push Service certificate Apple generated for your application:

* Log into the https://developer.apple.com/account/ios/certificate/certificateList.action["member center", window="_blank"] and choose `Certificates, Identifiers & Profiles` section.
* Under `Certificates`, click the certificate corresponding to your App ID, of type `Apple Push Services`.
  (Older certificates have a type of either `APNs Development iOS` or `APNs Production iOS`.)
* Click `Download`, and open the certificate with `Keychain Access`.
====
+
. Make sure you see a matching private key when you expand the certificate item, but select only the certificate.
. Click on `File / Export items`. Leave `File Format` to `Personal Information Exchange (.p12)`. +
+
[TIP]
====
You can leave the password field blank.
====
+
. Then go to your https://dashboard.wonderpush.com/["WonderPush dashboard", window="\_blank"] and upload the certificate in the `Settings / Configuration` page of your application management. +
  Choose either the development or production environment.
  The _development_ environment is used for sending to the devices you develop with, for applications installed directly using XCode.
  The _production_ environment is used for applications distributed through the App Store or TestFlight.
+
[TIP]
====
There can only be one APNs iOS certificate per application.

Please consider creating an application for development and an application for production, there will be no additional charges.

Switching from the development to production environment, or vice-versa, will render every push token invalid and they will be cleaned up as soon as you'll send a notification to it.
====

In order to handle push notifications, you will have to modify your Application delegate so that all notifications will be forwarded to the WonderPush SDK. Add the following methods:

[source,objc]
----
-(void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    [WonderPush didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
}

-(void) application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo
{
    [WonderPush handleDidReceiveRemoteNotification:userInfo];
}

- (void)application:(UIApplication *)app didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
    [WonderPush didFailToRegisterForRemoteNotificationsWithError:error];
    // You may appreciate the following log during development :-)
    NSLog(@"Error: %@", error);
}
----

That’s it you should now be able to receive push notifications from WonderPush.



==== Handling background mode


[NOTE]
====
If your application does not use the Remote notifications Background mode, you can safely skip this step.
If in doubt, click your project in the project navigator, select a target, go to the `Capabilities` tab, and under `Background modes`, see whether `Remote notifications` is checked.
====

If your applications uses the Remote notification Background mode, the behaviour of the notification is not exactly the same. In order to make WonderPush work in this case, overload the following method in your application delegate as follows:
[source,objc]
----
- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification
{
    [WonderPush handleNotification:notification.userInfo];
}
----
Your application now correctly receives push notifications.

[[ios-getting-started-send-your-first-notification]]
[role="numbered-lvlfirst"]
=== Send your first push notifications

. Log into https://dashboard.wonderpush.com/["your WonderPush dashboard"], click `Notifications`, then under the `Create notification` menu choose `Custom notification`.
. Give it a name, enter a short push message, then click `Save and continue`.
. Keep `Send to all users` selected, then click `Save and continue`.
. Keep `Once, when activated` selected, then click `Save`.
. Now close your application in your device.
. Click `FIRE` in the dashboard.
. A notification should have appeared in the notification center.

To fire your notification again, simply click `FIRE` again.
Allow 1 minute between each send, and feel free to refresh the page if necessary.

[[ios-getting-started-using-sdk]]
[role="numbered-lvlfirst"]
=== Using the SDK in your iOS application

[[ios-getting-started-using-sdk-track-event]]
==== Track your first event

The SDK automatically tracks generic events. This is probably insufficient to help you analyze, segment and notify users properly.
You will want to track events that make sense for your business, here is an simple example:

[source,objc]
----
[WonderPush trackEvent:"customized_interests" withData:nil];
----

This would permit you to know easily whether a user kept the default set of "topics of interests", say in a newsstand application, or if they already chose a topics that represents well their center of interest.
Your notification strategy could be to incite to customization for the lazy users, whereas you could engage in a more personalized communication with the users you performed the customized_interests event.

[[ios-getting-started-using-sdk-enriching-events]]
==== Enriching the events

Events can host a rich set of properties that WonderPush indexes to permit you to filter users based on finer criteria.
To do so, simply give a JSON object as second parameter. Here is an example:

[source,objc]
----
[WonderPush trackEvent:"browse_catalog" withData:@{"string_category": @"fashion"}];
----

Using this information, you could notify customers on new items for the categories that matters most to them.

Here is another example:

[source,objc]
----
[WonderPush trackEvent:"purchase" withData:@{@"int_foo": [NSNumber numberWithInt:3], @"float_amount": [NSNumber numberWithFloat:59.98]}];
----

You could choose to thank customer for every purchase, or you could take advantage of the purchase amount to give differentiated coupons to best buyers.

[[ios-getting-started-using-sdk-tagging-users]]
==== Tagging users

Some information are better represented as properties on a user, rather than discrete events in a timeline.
Here is an example:

[source,objc]
----
(void)didAddItemToCart:(NSString*)item withPrice:(double)price
{
    // Variables managed by your application
    cartItems += 1;
    cartAmount += price;
    // ...

    // Update this information in WonderPush
    [WonderPush putInstallationCustomProperties:@{@"int_itemsInCart": [NSNumber numberWithInt:cartItems],
                                                  @"float_cartAmount": [NSNumber numberWithFloat:cartAmount]}];
}

- (void)didPurchase {
    // Empty the information in WonderPush
    [WonderPush putInstallationCustomProperties:@{@"int_itemsInCart": [NSNull null],
                                                  @"float_cartAmount": [NSNull null]}];
}
----

Inactive users with non-empty carts could then easily be notified. Combined with a free delivery coupon for carts above a given amount, your conversion rate will improve still!

[[ios-getting-started-using-sdk-opt-out]]
==== Opt-out

On iOS, users are opt-out by default, and you need to call the `[WonderPush setNotificationEnabled:(BOOL)]` function to register the device, at an appropriate time. A user always has the option of opening the system settings and blocking notifications. The application has no mean to know it.

If a user no longer wants to receive notifications, you will rather want them to opt out of push notifications. This is done very simply using the following function call, and WonderPush will no longer send push notifications to this installation:

[source,objc]
----
[WonderPush setNotificationEnabled:NO];
----

Note that the device is not actually unregistered from push notifications, so the registration id continues to be valid and the device stays reachable.
The installation is simply marked and reported as _Soft opt-out_ in the dashboard, and WonderPush filters it out from the targeted users.


[[ios-getting-started-using-sdk-demo-application]]
==== Demo application
You can read an example integration by looking at the code of our https://github.com/wonderpush/wonderpush-ios-demo["Demo application, available on Github", window="_blank"].


[[ios-getting-started-using-sdk-api-reference]]
==== API Reference
Take a look at the functions exposed by the https://wonderpush.github.io/wonderpush-ios-sdk/latest/html/Classes/WonderPush.html["WonderPush class", window="_blank"].


[[ios-getting-started-advanced-usage]]
=== Advanced usage

[[ios-getting-started-advanced-usage-reading-custom-key-value-payload]]
==== Reading custom key-value payload

A notification can be added custom key-value pairs to it. In order to retrieve them, simply add one line of code in the appropriate methods of your application delegate as follow:

[source,objc]
----
(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo
{
    [WonderPush handleDidReceiveRemoteNotification:userInfo];
    // Get the custom payload
    NSDictionary * custom = [userInfo objectForKey:@"custom"];
}

// If you use the remote-notification background mode
- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification
{
    [WonderPush handleNotification:notification.userInfo];
    // Get the custom payload
    NSDictionary * custom = [notification.userInfo objectForKey:@"custom"];
}
----


[[ios-getting-started-advanced-usage-own-deep-links]]
==== Handling your own deep links

Deep links are handled by the SDK by calling the `[application openURL:]` function, just like HTTP links, but with an application-specific scheme, like: `yourApplicationSpecificScheme://somePage`.

Custom schemes are registered in your application’s `Info.plist` file, under the `URL Types section`.
To add one, select your project in the Project navigator, then select your application in the `Targets section`,
go to the `Info` tab, expand the `URL Types` section, and click the `+` button.
Then simply choose a unique scheme `(yourApplicationSpecificScheme` in our example) and write it in the `URL Schemes` field.

You will then need to implement the `- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation` function of your application delegate.

Here is an example:

[source,objc]
----
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{
    UINavigationController *navController = (UINavigationController *)self.window.rootViewController;
    [navController popToRootViewControllerAnimated:NO];
    UIStoryboard *storyboard = navController.storyboard;

    // Look at the url, and open the target page
    [navController pushViewController:[storyboard instantiateViewControllerWithIdentifier:@"DeepPageId"] animated:YES];
// For a more nested navigation tree, call pushViewController for each intermediate view

    return YES; // NO: not handled, YES: handled
}
----

If desired, you can also broadcast the notification opening to let some code resolve the most appropriate action to perform. To do so, you would use the `wonderpush://notificationOpen/broadcast URI` in your notification. Here is how to listen to this broadcast preferably in your `application: didFinishLaunchingWithOptions:` function of your application delegate:


[source,objc]
----
[[NSNotificationCenter defaultCenter] addObserverForName:WP_NOTIFICATION_OPENED_BROADCAST object:nil queue:nil usingBlock:^(NSNotification *note) {
NSDictionary *pushNotification = note.userInfo;

    UINavigationController *navController = (UINavigationController *)self.window.rootViewController;
    [navController popToRootViewControllerAnimated:NO];
    UIStoryboard *storyboard = navController.storyboard;

    // Look at the push notification data, and open the target page
    [navController pushViewController:[storyboard instantiateViewControllerWithIdentifier:@"DeepPageId"] animated:YES];
// For a more nested navigation tree, call pushViewController for each intermediate view
}];
----
